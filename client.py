import socket
import threading
import sys
import rsa
import pickle
import hashlib
import json

#Wait for incoming data from server
#.decode is used to turn the message in bytes to a string
challange = ''
pubkey = ''
privkey = ''
email = ''
host = "localhost"
port = 1818

'''
connect(pubkey,privkey,email,challange) sends your signed PublicKey and email to the server in order to be authenticated
'''
def connect(pubkey,privkey,email,challange):
    strpubkey = str(pubkey.n) + ' ' + str(pubkey.e)
    verify = 'pk ' + strpubkey + ' ' + 'email ' + email + ' ' + 'chal ' + challange
    signature = rsa.sign(verify.encode('utf-8'), privkey,'SHA-256').hex()
    verify = verify + ' ' + signature
    sock.sendall(str.encode(verify))
    print('sending ' + verify)

'''
 VerifyBlock(block) verify the block sent by the server by checking all signature of new nodes in the current block
 answer with the signature of the block's hash if the block is valid,
 answer with the hash of the current block if it is invalid
'''
def VerifyBlock(block):
    ver = 1
    print("verifying block validity")
    for i in block[2]:
        message = 'pk' + ' ' + str(i[0][0]) + ' ' + str(i[0][1]) + ' ' + 'email' + ' ' + i[1] + ' ' + 'chal' + ' ' + i[2]
        pk = rsa.PublicKey(i[0][0],i[0][1])
        sign = i[3]
        hashing = rsa.verify( message.encode('utf-8'),bytes.fromhex(sign), pk)
        print(hashing)
        if hashing == 'SHA-256':
            ver = ver and 1
        else:
            ver = 0

    if ver:
        signatureblock = rsa.sign(block[3].encode('utf-8'), privkey,'SHA-256').hex()
        strpubkey = str(pubkey.n) + ' ' + str(pubkey.e)
        verify = 'pk ' + strpubkey + ' ' + 'email ' + email + ' ' + 'sign ' + signatureblock
        signature = rsa.sign(verify.encode('utf-8'), privkey,'SHA-256').hex()
        verify = verify + ' ' + signature
        sock.sendall(str.encode(verify))
        print('sending consensus answer yes :')
        print(verify)
    else :
        trpubkey = str(pubkey.n) + ' ' + str(pubkey.e)
        verify = 'pk ' + strpubkey + ' ' + 'email ' + email + ' ' + 'sign ' + block[3]
        signature = rsa.sign(verify.encode('utf-8'), privkey,'SHA-256').hex()
        verify = verify + ' ' + signature
        sock.sendall(str.encode(verify))
        print('sending consensus answer no')
    return 0

'''
 receive(socket, signal) manages received messages
'''
def receive(socket, signal):
    global challange
    while signal:
        try:
            data = socket.recv(2048).decode()
            if data[0] == '[':
                print('received block')
                block = json.loads(data)
                VerifyBlock(block)
            else:
                parsed = data.split()
                if parsed[0] == 'challange':
                    challange = parsed[1]
                    print('received challange ' + challange)
                else:
                    print(data)
        except Exception as e:
            print("You have been disconnected from the server")
            print(e)
            signal = False
            break


#Attemp to connect to the server

try:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((host, port))
except:
    print("Could not make a connection to the server")
    input("Press enter to quit")
    sys.exit(0)

receiveThread = threading.Thread(target = receive, args = (sock, True))
receiveThread.start()


#managing the client input in order to facilitate the comunication with the server by automatically formatting the messages

while True:
    message = input()
    if message == "disconnect":
        sock.close()
        break
    elif message == "generate key":
        (pubkey, privkey) = rsa.newkeys(1024)
        print(pubkey,privkey)
    elif message == "set email":
        email = input()
    elif message == "connect 1":
        email = 'root1@test.it'
        pubkey = rsa.PublicKey(119770777999616036964482036516193989899837494454402262212320174845526315404803216372320908306890372744930417223903886098713646467509959684974498601907444633130871922367704281375480264549968160821209935332888725265017711576900685345115234860380091711666493101127543579986394987372953112289819973821762408459967, 65537)
        privkey = rsa.PrivateKey(119770777999616036964482036516193989899837494454402262212320174845526315404803216372320908306890372744930417223903886098713646467509959684974498601907444633130871922367704281375480264549968160821209935332888725265017711576900685345115234860380091711666493101127543579986394987372953112289819973821762408459967, 65537, 26672787965643774653960592077053439775823248417870836580692020566557159670615117307078805205289607248001273164515879848188438137133342411190667965317897481933437357035191631621435183169027975469714776027703265905819830236529825367804990665646494281767030763234952167320037607890847457162373522698431596532433, 44659137180340759958876268803910738747846956308877335366447217803000626835077167992126311203807815386442987763059259322597082273294981350200211351269897238930582823, 2681887415691942777453365642395488321778607617182533102316008461281165410069044712411935606017878562867819962411244465549964698676032292471234729)
        connect(pubkey,privkey,email,challange)
    elif message == "connect 2":
        email = 'root2@test.it'
        pubkey = rsa.PublicKey(116004225281319987658573288348459366496825961115624594341053052723162029806559546870943101465716069245005380880466778730925720191554438789145759559892723660608772015906113267763487059561271967567199756257816686273390854357775870689254778084091408084059783060034916665868756548222191625642387394930123129730919, 65537)
        privkey = rsa.PrivateKey(116004225281319987658573288348459366496825961115624594341053052723162029806559546870943101465716069245005380880466778730925720191554438789145759559892723660608772015906113267763487059561271967567199756257816686273390854357775870689254778084091408084059783060034916665868756548222191625642387394930123129730919, 65537, 113320818876899872284198551861646354006031628798745779549087652599135699074503696388675836534119786824762950537076211012597395858576174156886959581017346963896001018404143622564211141719854525829550608916151368531836600479017473926312966740769334280199642829633488405627689309329200361626967289394328986603433, 42529141898798550074390381613514100832398610399548991394201753219908682699756557812504021128503749882433121509892134810553736929811847405998308431364025901191831659, 2727640862290642914891780043841902802059534011350400735385751755117353221263229955061265447186961196541215691807749681300629491007786242856113141)
        connect(pubkey,privkey,email,challange)
    elif message == "connect 3":
        email = 'root3@test.it'
        privkey = rsa.PrivateKey(109408188808701462640681109534230415304054106571571409068865576027621529910922398951526070278451372101046352348576215241867114264747162101621938943056178439695690196413133683262343747311106890948975255893206864300355425778544110774780433868823662949090038382720445032632463499921195438372329573837611870173277, 65537, 45506474491300992876120761780270486759741991409958726212798979766192155329689086668899234779137066879814799558567512264492663193962843763494093910425610983554005997286234475141975340643742712015777804207496155334910020640773306453461045307844102122538866056278052833734250234103417673578143880763270663772853, 38196746067665208846318603661019859626469465948352325521601923806482253200289334112047295440512532950051393369177934693725502119802374393783504063188907822979385147, 2864332700353213131452119459146118535261726744960550663702850991242233277360099402842124943729519059624954124555522674428143485009472784984126791)
        pubkey = rsa.PublicKey(109408188808701462640681109534230415304054106571571409068865576027621529910922398951526070278451372101046352348576215241867114264747162101621938943056178439695690196413133683262343747311106890948975255893206864300355425778544110774780433868823662949090038382720445032632463499921195438372329573837611870173277, 65537)
        connect(pubkey,privkey,email,challange)
    elif message == "connect new":
        print("enter email")
        email = input()
        (pubkey, privkey) = rsa.newkeys(1024)
        print('generating keys')
        print((pubkey, privkey))
        connect(pubkey,privkey,email,challange)
    else:
        print('hello')
